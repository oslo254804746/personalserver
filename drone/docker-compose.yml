version: "3.5"
services:
  drone-server:
    image: "drone/drone"
    container_name: drone
    volumes:
      - "${DRONE_VOLUME}:/var/lib/drone/"
    expose:
      - "443"
    restart: always
    environment:
      - "DRONE_AGENTS_ENABLED=true"
      - "DRONE_GITEA_SERVER=${DRONE_GITEA_SERVER}"
      - "DRONE_SERVER_HOST=${DRONE_SERVER_HOST}"
      - "DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}"
      - "DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}"
      - "DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}"
      - "DRONE_LOGS_DEBUG=true"
      - "DRONE_DATABASE_DATASOURCE=${DRONE_MYSQL_DATABASE_USERNAME}:${DRONE_MYSQL_DATABASE_PASSWORD}@tcp(${MYSQL_HOST})/${DRONE_MYSQL_DATABASE_NAME}?parseTime=true"
      - "DRONE_DATABASE_DRIVER=mysql"
      - "DRONE_RPC_SECRET=${DRONE_RPC_SECRET}"
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.drone-server.rule=Host(`drone.example.com`)'
      - 'traefik.http.routers.drone-server.entrypoints=https'
      - 'traefik.http.routers.drone-server.tls=true'
      - 'traefik.http.routers.drone-server.tls.options=default'
  drone-runner-docker:
    container_name: "drone-docker-runner"
    image: "drone/drone-runner-docker"
    depends_on:
      - drone-server
    restart: always
    environment:
      - "DRONE_RPC_HOST=drone-server"
      - "DRONE_RPC_PROTO=http"
      - "DRONE_RPC_SECRET=${DRONE_RPC_SECRET}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
  drone-runner-ssh:
    container_name: "drone-ssh-runner"
    image: "drone/drone-runner-ssh"
    depends_on:
      - drone-server
    restart: always
    environment:
      - "DRONE_RPC_HOST=drone-server"
      - "DRONE_RPC_PROTO=http"
      - "DRONE_RPC_SECRET=${DRONE_RPC_SECRET}"
networks:
  default:
      name: example.com
      external: true